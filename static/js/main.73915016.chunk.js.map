{"version":3,"sources":["style.js","App.js","index.js"],"names":["GameWrapper","styled","div","p","currentState","winner","viewMode","SquareItem","button","lastItem","lastRow","state","player","stoneColor","Board","Game","size","InfoWrapper","ButtonWrapper","PreviousButton","NextButton","ErrorMessage","Restart","Round","StepInfo","Player","WinnerWrapper","Square","handleAddStone","position","getGomokuState","onClick","RowBoard","rowCount","map","squareCount","index","length","MemoRowBoard","memo","Information","info","events","controlPreviousButton","controlNewState","controlNextButton","restart","firstPlayer","secondPlayer","gomoku","message","name","currentStep","Winner","controlViewMode","App","setting","senteOrGote","borderGenerateArray","Array","from","v","i","useState","counterData","window","localStorage","getItem","JSON","parse","counter","setCounter","gomokurData","setGomoku","messageData","setMessage","currentStateData","setCurrentState","useEffect","writeStatesToLocalStorage","step","currentPosition","currentStoneColor","isWin","isWinFunc","some","condition","count","testMinus","distance","minusPosition","testStoneColor","testPlus","plusPosition","slice","Object","filter","_","states","keys","stateName","setItem","stringify","obj","predicate","key","reduce","res","require","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.73915016.chunk.js","sourcesContent":["import styled from \"styled-components\";\r\n\r\nexport const GameWrapper = styled.div`\r\n  position: relative;\r\n  user-select: none;\r\n  display: flex;\r\n  justify-content: flex-start;\r\n  align-items: center;\r\n  width: 100vw;\r\n  margin: 0 auto;\r\n  &:before {\r\n    content: \"\";\r\n    position: absolute;\r\n    top: 0;\r\n    left: 0;\r\n    background: rgba(255, 255, 255, 0);\r\n    width: 100%;\r\n    height: 100vh;\r\n    z-index: -1;\r\n    z-index: ${(p) =>\r\n      p.currentState.winner && p.currentState.viewMode === false && \"100\"};\r\n  }\r\n`;\r\n\r\nexport const SquareItem = styled.button`\r\n  position: relative;\r\n  background: #9d563e;\r\n  border: 1px solid black;\r\n  ${(p) =>\r\n    p.lastItem &&\r\n    `\r\n    border: 0;\r\n    background: transparent;\r\n  `}\r\n  ${(p) =>\r\n    p.lastRow &&\r\n    `\r\n    border: 0;\r\n    background: transparent;\r\n  `}\r\n  border-radius: 0;\r\n  line-height: 35px;\r\n  height: 35px;\r\n  width: 35px;\r\n  text-align: center;\r\n  margin-right: -1px;\r\n  pointer-events: none;\r\n  &:focus {\r\n    outline: none;\r\n  }\r\n  &:before {\r\n    content: \"\";\r\n    pointer-events: auto;\r\n    position: absolute;\r\n    height: 20px;\r\n    width: 20px;\r\n    top: 0%;\r\n    left: 0%;\r\n    transform: translate(-50%, -50%);\r\n    border-radius: 50%;\r\n    background: ${(p) => p.state && p.state.player.stoneColor};\r\n    border: ${(p) => p.state && `1px solid black`};\r\n    cursor: pointer;\r\n  }\r\n`;\r\n\r\nexport const Board = styled.div`\r\n  display: table;\r\n  margin-top: -2px;\r\n`;\r\n\r\nexport const Game = styled.div`\r\n  position: relative;\r\n  display: flex;\r\n  flex-direction: column;\r\n  margin-left: 44px;\r\n  margin-top: 34px;\r\n  min-width: ${(p) => p.size * 34}px;\r\n  &:before {\r\n    content: \"\";\r\n    position: absolute;\r\n    border: 14px solid #5d200d;\r\n    box-shadow: 3px 3px 5px 5px #cccccc;\r\n    border-radius: 4px;\r\n    top: -34px;\r\n    left: -34px;\r\n    width: 100%;\r\n    height: 100%;\r\n    background: #9d563e;\r\n  }\r\n`;\r\n\r\nexport const InfoWrapper = styled.div`\r\n  display: flex;\r\n  flex-direction: column;\r\n  font-size: 14px;\r\n  box-sizing: border-box;\r\n  height: ${(p) => p.size}px;\r\n  width: 100px;\r\n  min-width: 100px;\r\n  border: 1px solid black;\r\n  background: #aaa;\r\n  padding: 10px;\r\n  & > div {\r\n    margin-bottom: 10px;\r\n  }\r\n`;\r\n\r\nexport const ButtonWrapper = styled.div`\r\n  display: flex;\r\n  padding: 5px 0px;\r\n  justify-content: space-between;\r\n  & > div:hover {\r\n    cursor: pointer;\r\n    color: blue;\r\n  }\r\n`;\r\n\r\nexport const PreviousButton = styled.div`\r\n  color: black;\r\n  &:before {\r\n    content: \"\\\\21B6\";\r\n    font-size: 20px;\r\n  }\r\n`;\r\nexport const NextButton = styled.div`\r\n  color: black;\r\n  &:after {\r\n    content: \"\\\\21B7\";\r\n    font-size: 20px;\r\n  }\r\n`;\r\n\r\nexport const ErrorMessage = styled.div`\r\n  font-size: 12px;\r\n  color: red;\r\n  text-wrap: wrap;\r\n`;\r\n\r\nexport const Restart = styled.div`\r\n  text-align: center;\r\n  &:hover {\r\n    cursor: pointer;\r\n    color: blue;\r\n  }\r\n`;\r\n\r\nexport const Round = styled.div`\r\n  display: flex;\r\n  justify-content: center;\r\n  align-items: center;\r\n  padding: 5px 0px;\r\n  background: #3174e2;\r\n  color: white;\r\n`;\r\nexport const StepInfo = styled(Round)``;\r\n\r\nexport const Player = styled.div`\r\n  position: relative;\r\n  display: flex;\r\n  align-items: center;\r\n  &:after {\r\n    content: \"\";\r\n    position: absolute;\r\n    background: ${(p) => p.player.stoneColor};\r\n    top: 50%;\r\n    right: 0;\r\n    transform: translate(0, -50%);\r\n    border-radius: 50%;\r\n    width: 20px;\r\n    height: 20px;\r\n  }\r\n`;\r\n\r\nexport const WinnerWrapper = styled.div`\r\n  position: absolute;\r\n  display: flex;\r\n  flex-direction: column;\r\n  align-items: center;\r\n  font-size: 16px;\r\n  color: #434343;\r\n  top: 50%;\r\n  left: ${(p) => p.size}px;\r\n  transform: translate(-50%, -50%);\r\n  width: 400px;\r\n  height: 200px;\r\n  background: rgba(255, 255, 255, 0);\r\n  z-index: -1;\r\n  z-index: ${(p) =>\r\n    p.currentState.winner && p.currentState.viewMode === false && \"101\"};\r\n  & > div {\r\n    padding: 5px;\r\n    background: rgba(255, 197, 66, 1);\r\n    margin-bottom: 10px;\r\n  }\r\n`;\r\n","import * as S from \"./style\";\r\nimport { useState, useEffect, memo } from \"react\";\r\n\r\nconst Square = ({\r\n  handleAddStone,\r\n  position,\r\n  getGomokuState,\r\n  lastItem,\r\n  lastRow,\r\n}) => {\r\n  return (\r\n    <S.SquareItem\r\n      onClick={() => {\r\n        handleAddStone(position);\r\n      }}\r\n      state={getGomokuState(position)}\r\n      lastItem={lastItem}\r\n      lastRow={lastRow}\r\n    />\r\n  );\r\n};\r\n\r\nconst RowBoard = ({\r\n  handleAddStone,\r\n  rowCount,\r\n  size,\r\n  getGomokuState,\r\n  lastRow,\r\n}) => {\r\n  return (\r\n    <S.Board>\r\n      {size.map((squareCount, index) => (\r\n        <Square\r\n          getGomokuState={getGomokuState}\r\n          key={index}\r\n          handleAddStone={handleAddStone}\r\n          // 棋子的位置，為 1 ~ size * size 的數字\r\n          // 邏輯為第一行為 1 + size*0 ~ size + size*0，第二行為 1 + size*1 ~ size + size*1\r\n          position={squareCount + rowCount}\r\n          lastItem={size.length === index + 1} // 判斷是不是最後一行\r\n          lastRow={lastRow}\r\n        />\r\n      ))}\r\n    </S.Board>\r\n  );\r\n};\r\n\r\nconst MemoRowBoard = memo(RowBoard);\r\n\r\nconst Information = ({ size, currentState, info, events }) => {\r\n  const { controlPreviousButton, controlNewState, controlNextButton, restart } =\r\n    events;\r\n  const { firstPlayer, secondPlayer, gomoku, message } = info;\r\n  return (\r\n    <S.InfoWrapper size={size * 34 + 28}>\r\n      {!currentState.viewMode && (\r\n        <S.Round>{currentState.player.name} 的回合</S.Round>\r\n      )}\r\n      {currentState.viewMode && (\r\n        <S.StepInfo>\r\n          第 {currentState.currentStep}/{gomoku.length} 步\r\n        </S.StepInfo>\r\n      )}\r\n      <S.Player player={firstPlayer}>{firstPlayer.name}</S.Player>\r\n      <S.Player player={secondPlayer}>{secondPlayer.name}</S.Player>\r\n      <S.ButtonWrapper>\r\n        <S.PreviousButton onClick={controlPreviousButton} />\r\n        <div onClick={controlNewState}>\r\n          {currentState.viewMode ? \"☺\" : \"更新\"}\r\n        </div>\r\n        <S.NextButton onClick={controlNextButton} />\r\n      </S.ButtonWrapper>\r\n      <S.Restart onClick={restart}>重新開始</S.Restart>\r\n      {message && <S.ErrorMessage>{message}</S.ErrorMessage>}\r\n    </S.InfoWrapper>\r\n  );\r\n};\r\n\r\nconst Winner = ({ events, currentState, size }) => {\r\n  const { controlViewMode, restart } = events;\r\n  return (\r\n    <S.WinnerWrapper currentState={currentState} size={100 + (size / 2) * 34}>\r\n      <div>恭喜 {currentState.player.name} 勝利</div>\r\n      <div onClick={controlViewMode}>觀看這局棋譜</div>\r\n      <div onClick={restart}>重新開始這局</div>\r\n    </S.WinnerWrapper>\r\n  );\r\n};\r\n\r\nfunction App() {\r\n  const setting = {\r\n    length: 19,\r\n    firstPlayer: {\r\n      name: \"Tim\",\r\n      senteOrGote: \"sente\", //先手\r\n      stoneColor: \"black\",\r\n    },\r\n    secondPlayer: {\r\n      name: \"Bob\",\r\n      senteOrGote: \"gote\", //後手\r\n      stoneColor: \"white\",\r\n    },\r\n  };\r\n  const { length: size } = setting;\r\n  const { firstPlayer, secondPlayer } = setting;\r\n  // 繪製棋盤，為 1 ~ size 的陣列\r\n  const borderGenerateArray = Array.from(setting, (v, i) => i + 1);\r\n\r\n  const [counter, setCounter] = useState(() => {\r\n    const counterData = window.localStorage.getItem(\"counter\");\r\n    if (counterData) {\r\n      return {\r\n        ...JSON.parse(counterData),\r\n      };\r\n    }\r\n    return {};\r\n  });\r\n  const [gomoku, setGomoku] = useState(() => {\r\n    const gomokurData = window.localStorage.getItem(\"gomoku\");\r\n    if (gomokurData) {\r\n      return [...JSON.parse(gomokurData)];\r\n    }\r\n    return [];\r\n  });\r\n  const [message, setMessage] = useState(() => {\r\n    const messageData = window.localStorage.getItem(\"message\");\r\n    if (messageData) {\r\n      return JSON.parse(messageData);\r\n    }\r\n    return \"\";\r\n  });\r\n  const [currentState, setCurrentState] = useState(() => {\r\n    const currentStateData = window.localStorage.getItem(\"currentState\");\r\n    if (currentStateData) {\r\n      return {\r\n        ...JSON.parse(currentStateData),\r\n      };\r\n    }\r\n    return {\r\n      player: firstPlayer,\r\n      currentStep: 0,\r\n      winner: false,\r\n      viewMode: false,\r\n    };\r\n  });\r\n\r\n  useEffect(() => {\r\n    const myStates = {\r\n      counter,\r\n      gomoku,\r\n      message,\r\n      currentState,\r\n    };\r\n    // 將狀態寫入 localStorage\r\n    writeStatesToLocalStorage(myStates);\r\n  });\r\n\r\n  const getGomokuState = (position) => {\r\n    const step = counter[position];\r\n    const { currentStep } = currentState;\r\n    // 控制畫面上的棋子依照操做 ↶ 及 ↷ 來顯示\r\n    if (step > currentStep) return;\r\n    return gomoku[step - 1];\r\n  };\r\n  // 新增棋子\r\n  const handleAddStone = (position) => {\r\n    // 出現勝利者後不得再下棋\r\n    if (currentState.winner === true) return;\r\n    // 防制按了 ↶ 或 ↷ 再繼續下棋的狀況\r\n    if (currentState.currentStep < gomoku.length)\r\n      return setMessage(\"按更新才可繼續下棋\");\r\n    const currentPosition = position;\r\n    const {\r\n      player,\r\n      player: { stoneColor: currentStoneColor },\r\n    } = currentState;\r\n    let { currentStep } = currentState;\r\n    const isWin = isWinFunc(currentPosition, currentStoneColor);\r\n    // 棋盤上沒有準備放入棋子的位置\r\n    if (!counter[position]) {\r\n      currentStep++;\r\n      // 將下的棋子的位置加入 counter\r\n      setCounter({\r\n        ...counter,\r\n        [position]: currentStep,\r\n      });\r\n      // 將下的棋子的資訊加入 gomoku\r\n      setGomoku([\r\n        ...gomoku,\r\n        {\r\n          ...currentState,\r\n          position,\r\n          currentStep,\r\n        },\r\n      ]);\r\n      // 勝利則將 winner: true 加入 currentState\r\n      if (isWin) {\r\n        return setCurrentState({\r\n          ...currentState,\r\n          currentStep,\r\n          winner: isWin,\r\n        });\r\n      }\r\n      // 每下一次棋都改變 currentState 的狀態，使用者交換，目前步數增加\r\n      setCurrentState({\r\n        ...currentState,\r\n        currentStep,\r\n        player: player.name !== firstPlayer.name ? firstPlayer : secondPlayer,\r\n      });\r\n    }\r\n  };\r\n  // 點擊更新按鈕\r\n  const controlNewState = () => {\r\n    if (currentState.viewMode) return;\r\n    setMessage(\"\");\r\n    const { currentStep } = currentState;\r\n    // 從 gomoku 刪除大於目前步數的棋子\r\n    setGomoku(gomoku.slice(0, currentStep));\r\n    // 從 counter 刪除大於目前步數的棋子\r\n    setCounter(Object.filter(counter, (step) => step <= currentStep));\r\n  };\r\n  // 點擊 ↶\r\n  const controlPreviousButton = () => {\r\n    const { player } = currentState;\r\n    let { currentStep } = currentState;\r\n    if (currentStep <= 0) return;\r\n    setCurrentState({\r\n      ...currentState,\r\n      currentStep: currentStep - 1,\r\n      player: player.name !== firstPlayer.name ? firstPlayer : secondPlayer,\r\n    });\r\n  };\r\n  // 點擊 ↷\r\n  const controlNextButton = () => {\r\n    const { player } = currentState;\r\n    let { currentStep } = currentState;\r\n    if (currentStep >= gomoku.length) return;\r\n    setCurrentState({\r\n      ...currentState,\r\n      currentStep: currentStep + 1,\r\n      player: player.name !== firstPlayer.name ? firstPlayer : secondPlayer,\r\n    });\r\n  };\r\n  // 點擊觀看棋譜\r\n  const controlViewMode = () => {\r\n    setCurrentState({\r\n      ...currentState,\r\n      viewMode: true,\r\n    });\r\n  };\r\n  // 點擊重新開始\r\n  const restart = () => {\r\n    setCounter({});\r\n    setGomoku([]);\r\n    setCurrentState({\r\n      player: firstPlayer,\r\n      currentStep: 0,\r\n      winner: false,\r\n      viewMode: false,\r\n    });\r\n    setMessage(\"\");\r\n  };\r\n  /*\r\n    判斷每個棋子周遭的狀況 \r\n    size: 直向的棋子\r\n    1: 橫向的棋子\r\n    size + 1: 左上至右下的棋子\r\n    size - 1: 左下至右上的棋子\r\n  */\r\n  const isWinFunc = (currentPosition, currentStoneColor) => {\r\n    const conditions = [size + 1, size - 1, size, 1];\r\n    return conditions.some((condition) => {\r\n      // 計算 testMinus、testPlus 符合條件的棋子總和\r\n      let count = 1;\r\n      const testMinus = (position, distance) => {\r\n        // 防止跨行的判斷\r\n        if (distance === 1 && (position - 1) % size === 0) {\r\n          return false;\r\n        }\r\n        let minusPosition = position - distance;\r\n        // 防止超出棋盤的判斷\r\n        if (minusPosition <= 0 || !counter[minusPosition]) {\r\n          return false;\r\n        }\r\n        const {\r\n          player: { stoneColor: testStoneColor },\r\n        } = getGomokuState(minusPosition);\r\n        // 棋子顏色必須相同\r\n        if (currentStoneColor !== testStoneColor) return false;\r\n        count++;\r\n        // 找不到棋子則回傳 count\r\n        return testMinus(minusPosition, distance) || count;\r\n      };\r\n\r\n      const testPlus = (position, distance) => {\r\n        // 防止跨行的判斷\r\n        if (distance === 1 && position % size === 0) {\r\n          return false;\r\n        }\r\n        let plusPosition = position + distance;\r\n        // 防止超出棋盤的判斷\r\n        if (plusPosition > size * size || !counter[plusPosition]) {\r\n          return false;\r\n        }\r\n        const {\r\n          player: { stoneColor: testStoneColor },\r\n        } = getGomokuState(plusPosition);\r\n        // 棋子顏色必須相同\r\n        if (currentStoneColor !== testStoneColor) return false;\r\n        count++;\r\n        // 找不到棋子則回傳 count\r\n        return testPlus(plusPosition, distance) || count;\r\n      };\r\n      testMinus(currentPosition, condition);\r\n      testPlus(currentPosition, condition);\r\n      // 棋子 >= 5 則回傳勝利\r\n      return count >= 5;\r\n    });\r\n  };\r\n\r\n  return (\r\n    <S.GameWrapper currentState={currentState}>\r\n      <Winner\r\n        events={{ controlViewMode, restart }}\r\n        currentState={currentState}\r\n        size={size}\r\n      />\r\n      <Information\r\n        events={{\r\n          controlPreviousButton,\r\n          controlNextButton,\r\n          controlNewState,\r\n          restart,\r\n        }}\r\n        info={{ firstPlayer, secondPlayer, gomoku, message }}\r\n        currentState={currentState}\r\n        size={size}\r\n      />\r\n      <S.Game size={size}>\r\n        {borderGenerateArray.map((_, index) => (\r\n          <MemoRowBoard\r\n            key={index}\r\n            getGomokuState={getGomokuState}\r\n            rowCount={borderGenerateArray.length * index}\r\n            size={borderGenerateArray}\r\n            handleAddStone={handleAddStone}\r\n            lastRow={size === index + 1} // 判斷是不是最後一列\r\n          ></MemoRowBoard>\r\n        ))}\r\n      </S.Game>\r\n    </S.GameWrapper>\r\n  );\r\n}\r\n\r\nexport default App;\r\n\r\nconst writeStatesToLocalStorage = (states) => {\r\n  Object.keys(states).map((stateName) =>\r\n    window.localStorage.setItem(stateName, JSON.stringify(states[stateName]))\r\n  );\r\n};\r\n// 依照條件判斷 key 的值來重組 object\r\nObject.filter = (obj, predicate) =>\r\n  Object.keys(obj)\r\n    .filter((key) => predicate(obj[key]))\r\n    .reduce((res, key) => {\r\n      res[key] = obj[key];\r\n      return res;\r\n    }, {});\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport App from \"./App\";\r\nrequire(\"normalize.css\");\r\n\r\nReactDOM.render(<App />, document.getElementById(\"root\"));\r\n"],"sourceRoot":""}